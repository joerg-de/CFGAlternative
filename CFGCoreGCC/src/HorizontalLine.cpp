/*
 * Copyright 2014-2022 joerg All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "HorizontalLine.h"

#include "CFGEdge.h"

#include "CFGNode.h"

#include <cstdlib>

HorizontalLine::HorizontalLine(VerticalLine* Vertical, CFGEdge &edge)
{
    this->edge = &edge;
    /*if(isDown())
        this->lowerVertical = Vertical;
    else*/
        this->upperVertical = Vertical;
    Vertical->link(*this);
}

CFGEdge* HorizontalLine::getEdge()
// don't delete the following line as it's needed to preserve source code of this autogenerated element
// section -64--88--78-20-3797976a:1506cf30996:-8000:0000000000000B9D begin
{
    return edge;
}
// section -64--88--78-20-3797976a:1506cf30996:-8000:0000000000000B9D end
// don't delete the previous line as it's needed to preserve source code of this autogenerated element

int HorizontalLine::getxToUpperVertical() const
// don't delete the following line as it's needed to preserve source code of this autogenerated element
// section -64--88--78-20-3797976a:1506cf30996:-8000:0000000000000BC3 begin
{
    return upperVertical->getx();
}
// section -64--88--78-20-3797976a:1506cf30996:-8000:0000000000000BC3 end
// don't delete the previous line as it's needed to preserve source code of this autogenerated element

int HorizontalLine::getxToLowerVertical() const
// don't delete the following line as it's needed to preserve source code of this autogenerated element
// section -64--88--78-20-3797976a:1506cf30996:-8000:0000000000000BC5 begin
{
    return lowerVertical->getx();
}
// section -64--88--78-20-3797976a:1506cf30996:-8000:0000000000000BC5 end
// don't delete the previous line as it's needed to preserve source code of this autogenerated element

int HorizontalLine::getNormalisedSize()
{
    int x1,x2;
    if(upperVertical->isIOLine())
    {
        if(isDown())
            x1 = edge->getSrc()->getCenterx();
        else
            x1 = edge->getDest()->getCenterx();
    }
    else
        x1 = upperVertical->getx();

    if(lowerVertical->isIOLine())
    {
        if(isDown())
            x2 = edge->getDest()->getCenterx();
        else
            x2 = edge->getSrc()->getCenterx();
    }
    else
        x2 = lowerVertical->getx();

    int diff = x1 - x2;
    return std::abs(diff);

}

unsigned int HorizontalLine::gety() const
// don't delete the following line as it's needed to preserve source code of this autogenerated element
// section -64--88--78-20-3797976a:1506cf30996:-8000:0000000000000BC7 begin
{
    return y;
}
// section -64--88--78-20-3797976a:1506cf30996:-8000:0000000000000BC7 end
// don't delete the previous line as it's needed to preserve source code of this autogenerated element

bool HorizontalLine::isFirst()
{
    if(isDown())
        return getPrev() == nullptr;
    else
        return getNext() == nullptr;
}

bool HorizontalLine::isLast()
{
    if(isDown())
        return getNext() == nullptr;
    else
        return getPrev() == nullptr;
}
// section -64--88--78-20-3797976a:1506cf30996:-8000:0000000000000BC9 end
// don't delete the previous line as it's needed to preserve source code of this autogenerated element

HorizontalLine* HorizontalLine::getNext()
// don't delete the following line as it's needed to preserve source code of this autogenerated element
// section -64--88--78-20-3797976a:1506cf30996:-8000:0000000000000BCF begin
{
    return lowerVertical->getLowerHorizont();
}
// section -64--88--78-20-3797976a:1506cf30996:-8000:0000000000000BCF end
// don't delete the previous line as it's needed to preserve source code of this autogenerated element

HorizontalLine* HorizontalLine::getPrev()
// don't delete the following line as it's needed to preserve source code of this autogenerated element
// section -64--88--78-20-3797976a:1506cf30996:-8000:0000000000000BD1 begin
{
    return upperVertical->getUpperHorizont();
}
// section -64--88--78-20-3797976a:1506cf30996:-8000:0000000000000BD1 end
// don't delete the previous line as it's needed to preserve source code of this autogenerated element

VerticalLine* HorizontalLine::getUpperVertical()
// don't delete the following line as it's needed to preserve source code of this autogenerated element
// section -64--88--78-20-3797976a:1506cf30996:-8000:0000000000000BD4 begin
{
    return upperVertical;
}
// section -64--88--78-20-3797976a:1506cf30996:-8000:0000000000000BD4 end
// don't delete the previous line as it's needed to preserve source code of this autogenerated element

VerticalLine* HorizontalLine::getLowerVertical()
// don't delete the following line as it's needed to preserve source code of this autogenerated element
// section -64--88--78-20-3797976a:1506cf30996:-8000:0000000000000BD6 begin
{
    return lowerVertical;
}
// section -64--88--78-20-3797976a:1506cf30996:-8000:0000000000000BD6 end
// don't delete the previous line as it's needed to preserve source code of this autogenerated element

CFGLayer* HorizontalLine::getLayer()
// don't delete the following line as it's needed to preserve source code of this autogenerated element
// section -64--88--78-20-3797976a:1506cf30996:-8000:0000000000000BEF begin
{
    return layer;
}
void HorizontalLine::setLayer(CFGLayer &layer)
{
    this->layer = &layer;
}

// section -64--88--78-20-3797976a:1506cf30996:-8000:0000000000000BEF end
// don't delete the previous line as it's needed to preserve source code of this autogenerated element

void HorizontalLine::sety(int y)
// don't delete the following line as it's needed to preserve source code of this autogenerated element
// section -64--88--78-20-55cbe988:15071e72dc6:-8000:0000000000000BE8 begin
{
    this->y = y;
}
// section -64--88--78-20-55cbe988:15071e72dc6:-8000:0000000000000BE8 end
// don't delete the previous line as it's needed to preserve source code of this autogenerated element

void HorizontalLine::link(VerticalLine& Vertical)
// don't delete the following line as it's needed to preserve source code of this autogenerated element
// section -64--88--78-20--4061d8fd:15076c26818:-8000:0000000000000BEC begin
{
   this->lowerVertical = &Vertical;
}
// section -64--88--78-20--4061d8fd:15076c26818:-8000:0000000000000BEC end
// don't delete the previous line as it's needed to preserve source code of this autogenerated element

bool HorizontalLine::isDown() const
{
    return this->edge->isDown();
}
int HorizontalLine::isAngleChange()
{
    if(isDown())
        return 1;
    if(getNext() == nullptr)
        return 0;
    if(getPrev() == nullptr)
        return 2;
    return 0;

}
int HorizontalLine::getLeftx()
{
    int x1 = getxToUpperVertical();
    int x2 = getxToLowerVertical();
    if(x2 > x1)
        return x1;
    else
        return x2;
}
int HorizontalLine::getRightx()
{
    int x1 = getxToUpperVertical();
    int x2 = getxToLowerVertical();
    if(x2 < x1)
        return x1;
    else
        return x2;
}
bool HorizontalLine::isInLine(int x)
{
    if(getLeftx() < x && x <getRightx())
        return true;
    else
        return false;
}

std::vector<HorizontalLine*> HorizontalLine::getAboveList(std::vector<HorizontalLine*>::iterator begin, std::vector<HorizontalLine*>::iterator end)
{
    std::vector<HorizontalLine*> ret;
    //only do that in the sides
    for(std::vector<HorizontalLine*>::iterator i = begin; i != end;++i)
    {

        switch(isAngleChange())
        {
            case 0:
        {
            if((*i)->isInLine(getxToUpperVertical()) || (*i)->isInLine(getxToLowerVertical()))
                ret.push_back(*i);

        }
            break;
            case 1:
        {
            bool up = (*i)->isInLine(getxToUpperVertical());
            bool down = (*i)->isInLine(getxToLowerVertical());
            if((up != down) && (down == true))
                ret.push_back(*i);
        }
            break;
            case 2:
        {
            if(isInLine((*i)->getxToUpperVertical()) || isInLine((*i)->getxToLowerVertical()))
                ret.push_back(*i);
        }
            break;
        }

    }
    return ret;
}

int HorizontalLine::getLineSize() const
{
    return edge->getHorizontalLines()->size() - 2;
}
